
Yii Installation :
-----------------

composer create-project --prefer-dist yiisoft/yii2-app-basic yii
composer create-project --prefer-dist --stability=dev yiisoft/app projName


--------------------------------------------------------------------------------

Naming Conventions: 

Model: User,  Table: user (Singular)
Model: Post,  Table: post (Singular)

--------------------------------------------------------------------------------

Migration:
---------

	1. Create new migrtions
	2. Apply new migrations
	3. Revert migrations
	4. Re-apply migrations
   5. Show migration history or status


php yii migrate/create create_news_table
php yii migrate
php yii migrate/create drop_news_table


php yii migrate/create create_post_table --fields="author_id:integer:notNull:foreignKey(user),category_id:integer:defaultValue(1):foreignKey,title:string,body:text"


yii migrate/down
yii migrate/down 3

yii migrate/redo        # redo the last applied migration
yii migrate/redo 3

yii migrate/fresh       # truncate the database and apply all migrations from the beginning


yii migrate/history     # showing the last 10 applied migrations
yii migrate/history 5   # showing the last 5 applied migrations
yii migrate/history all # showing all applied migrations

yii migrate/new         # showing the first 10 new migrations
yii migrate/new 5       # showing the first 5 new migrations
yii migrate/new all     # showing all new migrations


yii migrate/fresh


//Migrate Multiple Databases
yii migrate --db=db2


>> AddColumn
yii migrate/create add_name_column_to_post_table --fields="name:string"
yii migrate/create add_position_column_to_post_table --fields="position:integer"

>> DropTable
yii migrate/create drop_post_table --fields="title:string(12):notNull:unique,body:text:"


------------------------------------------------------------------------------


public function up(){}
public function down(){}


//Implement safeUp/safeDown instead if transaction is needed
public function safeUp(){}
public function safeDown(){}


-------------------------------------------------------------------------------

Example 01: 

public function run() {
	$this->createTable('place', [
		'id' => $this->primaryKey()->unsigned()->notNull(),
		'place_id' => $this->string(40)->notNull(),
		'lat' => $this->string(40)->notNull(),
		'lng' => $this->string(40)->notNull(),
		'country_code' => $this->string(2)->notNull(),
        'is_country' => $this->tinyInteger(4)->notNull(),
	]);	
}

------------

Example 02: 

public function run() {
	$this->createTable('place', [
		'id' => $this->primaryKey(),
		'title' => $this->string(),
		'body' => $this->text(),
		]);	
}

----------------------------------------------------------------


>> Database Seeling : 
   -----------------


public function run() {
	$this->createTable('place', [
		'id' => $this->primaryKey(),
		'title' => $this->string(),
		'body' => $this->text(),
    ]);	

    $this->insert('post', [
    	'title' => '',
    	'body' => 'This is database seeding',
    ]);
}


-----------------------------------------------------------------



>> Add Column();

php yii migrate/create add_position_column_to_post_table --fields="position:integer"



>>>> Delete Column();

php yii migrate/create drop_position_column_from_post_table --fields="position:integer"




>> Transactional Migrations:

public function safeUp(){
	
}

public function safeDown(){
	
}


---------------------------------------------------------

>> Faker Factory:


//Controller

$faker = \Faker\Factory::create()


$faker->name
$faker->username
$faker->firstName
$faker->lastName
$faker->email



-----------------------------------------------------------


>> Seeding Database using third party tool

compoer require tebazil/yii2-db-seeder

OR   

"tebazil/yii2-db-seeder":"*"




File: 

$seeder = new \tebazil\yii2seeder\Seeder();
$generator = $seeder->getGeneratorConfigurator();
$faker = $generator->getFakerConfigurator();


$seeder->table('articla')->columns([
   'id', //automatic pk
   'book_id', //automatic fk
   'name' => $faker->firstName,
   'content' => $faker->text
   ])->rowQuantity(30);



$seeder->table('book')->columns([
   'id',   
   'name' => $faker->text(20),
   'content' => $faker->text
   ])->rowQuantity(30);



$seeder->table('category')->columns([
   'id',   
   'book_id',
   'name' => $faker->text(20),
   'type' => $faker->randomElement(['shop','cv','test'])
   ])->rowQuantity(30);

$seeder->refill();



------------------------------------------------------------


$model->post
$model->comments
$model->author
$model->members


----------------------------------------------------------------






